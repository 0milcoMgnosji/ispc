//
// Generated by LLVM NVPTX Back-End
//

.version 3.1
.target sm_35, texmode_independent
.address_size 64

	// .globl	mandelbrot_scanline
                                        // @mandelbrot_scanline
.entry mandelbrot_scanline(
	.param .f32 mandelbrot_scanline_param_0,
	.param .f32 mandelbrot_scanline_param_1,
	.param .f32 mandelbrot_scanline_param_2,
	.param .f32 mandelbrot_scanline_param_3,
	.param .u32 mandelbrot_scanline_param_4,
	.param .u32 mandelbrot_scanline_param_5,
	.param .u32 mandelbrot_scanline_param_6,
	.param .u32 mandelbrot_scanline_param_7,
	.param .u32 mandelbrot_scanline_param_8,
	.param .u64 .ptr .align 4 mandelbrot_scanline_param_9
)
{
	.reg .pred %p<396>;
	.reg .s16 %rc<396>;
	.reg .s16 %rs<396>;
	.reg .s32 %r<396>;
	.reg .s64 %rl<396>;
	.reg .f32 %f<396>;
	.reg .f64 %fl<396>;

// BB#0:                                // %allocas
	ld.param.u32 	%r6, [mandelbrot_scanline_param_5];
	mov.u32 	%r5, %ctaid.y;
	ld.param.u32 	%r7, [mandelbrot_scanline_param_7];
	mul.lo.s32 	%r0, %r5, %r7;
	mad.lo.s32 	%r1, %r5, %r7, %r7;
	setp.lt.s32 	%p0, %r1, %r6;
	selp.b32 	%r1, %r1, %r6, %p0;
	setp.ge.s32 	%p0, %r0, %r1;
	@%p0 bra 	BB0_13;
// BB#1:                                // %for_test28.preheader.lr.ph
	ld.param.f32 	%f0, [mandelbrot_scanline_param_0];
	mov.u32 	%r2, %ctaid.x;
	ld.param.u32 	%r3, [mandelbrot_scanline_param_6];
	mul.lo.s32 	%r1, %r2, %r3;
	ld.param.f32 	%f1, [mandelbrot_scanline_param_1];
	mad.lo.s32 	%r3, %r2, %r3, %r3;
	ld.param.f32 	%f2, [mandelbrot_scanline_param_2];
	ld.param.u32 	%r2, [mandelbrot_scanline_param_4];
	setp.lt.s32 	%p0, %r3, %r2;
	ld.param.f32 	%f3, [mandelbrot_scanline_param_3];
	selp.b32 	%r3, %r3, %r2, %p0;
	ld.param.u32 	%r4, [mandelbrot_scanline_param_8];
	ld.param.u64 	%rl0, [mandelbrot_scanline_param_9];
	setp.gt.s32 	%p0, %r4, 0;
	not.b32 	%r6, %r6;
	add.s32 	%r5, %r5, 1;
	mul.lo.s32 	%r5, %r5, %r7;
	not.b32 	%r5, %r5;
	setp.gt.s32 	%p1, %r6, %r5;
	selp.b32 	%r5, %r6, %r5, %p1;
	not.b32 	%r5, %r5;
BB0_2:                                  // %for_test28.preheader
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_15 Depth 2
                                        //     Child Loop BB0_8 Depth 2
                                        //       Child Loop BB0_11 Depth 3
	setp.ge.s32 	%p1, %r1, %r3;
	@%p1 bra 	BB0_12;
// BB#3:                                // %for_loop30.lr.ph
                                        //   in Loop: Header=BB0_2 Depth=1
	mul.lo.s32 	%r6, %r0, %r2;
	mov.u32 	%r7, %r1;
	@%p0 bra 	BB0_4;
	bra.uni 	BB0_15;
BB0_4:                                  //   in Loop: Header=BB0_2 Depth=1
	cvt.rn.f32.s32 	%f4, %r0;
	fma.rn.f32 	%f4, %f4, %f3, %f2;
	mov.u32 	%r7, %r1;
BB0_8:                                  // %for_loop.i.lr.ph.us
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_11 Depth 3
	mov.u32 	%r9, %tid.x;
	mov.u32 	%r8, WARP_SZ;
	add.s32 	%r10, %r8, -1;
	and.b32  	%r10, %r10, %r9;
	add.s32 	%r11, %r10, %r7;
	cvt.rn.f32.s32 	%f5, %r11;
	fma.rn.f32 	%f5, %f5, %f1, %f0;
	mov.u32 	%r10, 0;
	mov.pred 	%p1, 0;
	mov.pred 	%p3, -1;
	mov.pred 	%p4, %p0;
	mov.pred 	%p2, %p1;
	mov.f32 	%f7, %f5;
	mov.f32 	%f6, %f4;
BB0_11:                                 // %for_loop.i.us
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_8 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	and.pred  	%p4, %p3, %p4;
	mul.f32 	%f8, %f7, %f7;
	fma.rn.f32 	%f9, %f6, %f6, %f8;
	setp.gtu.f32 	%p3, %f9, 0f40800000;
	and.pred  	%p3, %p4, %p3;
	or.pred  	%p2, %p3, %p2;
	xor.pred  	%p5, %p2, %p4;
	mov.pred 	%p3, %p1;
	@!%p5 bra 	BB0_10;
	bra.uni 	BB0_9;
BB0_9:                                  // %not_all_continued_or_breaked.i.us
                                        //   in Loop: Header=BB0_11 Depth=3
	mul.f32 	%f9, %f6, %f6;
	not.pred 	%p3, %p2;
	and.pred  	%p3, %p4, %p3;
	sub.f32 	%f8, %f8, %f9;
	add.f32 	%f8, %f5, %f8;
	add.f32 	%f7, %f7, %f7;
	fma.rn.f32 	%f6, %f6, %f7, %f4;
	mov.f32 	%f7, %f8;
BB0_10:                                 // %for_step.i.us
                                        //   in Loop: Header=BB0_11 Depth=3
	add.s32 	%r12, %r10, 1;
	selp.b32 	%r10, %r12, %r10, %p3;
	setp.lt.s32 	%p4, %r10, %r4;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_11;
// BB#5:                                // %mandel___vyfvyfvyi.exit.us
                                        //   in Loop: Header=BB0_8 Depth=2
	setp.ge.s32 	%p1, %r11, %r3;
	@%p1 bra 	BB0_7;
// BB#6:                                // %if_then.us
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r11, %r8, 1073741823;
	and.b32  	%r9, %r11, %r9;
	add.s32 	%r11, %r7, %r6;
	add.s32 	%r9, %r11, %r9;
	shl.b32 	%r9, %r9, 2;
	cvt.s64.s32 	%rl1, %r9;
	add.s64 	%rl1, %rl1, %rl0;
	st.u32 	[%rl1], %r10;
BB0_7:                                  // %if_exit.us
                                        //   in Loop: Header=BB0_8 Depth=2
	add.s32 	%r7, %r8, %r7;
	setp.lt.s32 	%p1, %r7, %r3;
	@%p1 bra 	BB0_8;
	bra.uni 	BB0_12;
BB0_15:                                 // %mandel___vyfvyfvyi.exit
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r9, %tid.x;
	mov.u32 	%r8, WARP_SZ;
	add.s32 	%r10, %r8, -1;
	and.b32  	%r10, %r10, %r9;
	add.s32 	%r10, %r10, %r7;
	setp.lt.s32 	%p1, %r10, %r3;
	@%p1 bra 	BB0_16;
	bra.uni 	BB0_14;
BB0_16:                                 // %if_then
                                        //   in Loop: Header=BB0_15 Depth=2
	add.s32 	%r10, %r8, 1073741823;
	and.b32  	%r9, %r10, %r9;
	add.s32 	%r10, %r7, %r6;
	add.s32 	%r9, %r10, %r9;
	shl.b32 	%r9, %r9, 2;
	cvt.s64.s32 	%rl1, %r9;
	add.s64 	%rl1, %rl1, %rl0;
	mov.u32 	%r9, 0;
	st.u32 	[%rl1], %r9;
BB0_14:                                 // %if_exit
                                        //   in Loop: Header=BB0_15 Depth=2
	add.s32 	%r7, %r8, %r7;
	setp.lt.s32 	%p1, %r7, %r3;
	@%p1 bra 	BB0_15;
BB0_12:                                 // %for_exit31
                                        //   in Loop: Header=BB0_2 Depth=1
	add.s32 	%r0, %r0, 1;
	setp.eq.s32 	%p1, %r0, %r5;
	@%p1 bra 	BB0_13;
	bra.uni 	BB0_2;
BB0_13:                                 // %for_exit
	ret;
}

